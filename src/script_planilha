function doPost(e) {
  try {
    const data = JSON.parse(e.postData.contents);
    const acao = data.acao || 'pedido';
  

    if (acao === "pedido") return salvarPedido(data);
    if (acao === "cadastrar") return cadastrarCliente(data);
    if (acao === "login") return loginCliente(data);

    throw new Error('Ação inválida: ' + acao);
  } catch (err) {
    return ContentService.createTextOutput(JSON.stringify({ success: false, error: err.message }))
      .setMimeType(ContentService.MimeType.JSON);
  }
}

function formatarObservacoes(obs) {
  if (!obs || typeof obs !== 'object') return '';
  return Object.entries(obs)
    .filter(([_, val]) => val !== '')
    .map(([categoria, valor]) => `${categoria}: ${valor}`)
    .join(' | ');
}

function salvarPedido(data) {
  const sheet = SpreadsheetApp.getActiveSpreadsheet().getSheetByName('Pedidos');
  
  if (!data.nome || !data.telefone || !Array.isArray(data.pedido)) {
    throw new Error('Dados incompletos ou formato incorreto.');
  }

  data.pedido.forEach(item => {
    sheet.appendRow([
      new Date(),
      data.nome,
      data.telefone,
      data.dataEntrega || '',
      data.endereco || '',      
      item.produto,
      item.quantidade,
      item.unidade, 
      formatarObservacoes(item.observacoes)
    ]);
  });

  return ContentService.createTextOutput(JSON.stringify({ success: true }))
    .setMimeType(ContentService.MimeType.JSON);
}

function cadastrarCliente(data) {
  const sheet = SpreadsheetApp.getActiveSpreadsheet().getSheetByName('Clientes');

  if (!data.nome || !data.email || !data.senha) {
    throw new Error('Campos obrigatórios faltando. ');
  }

  const existing = sheet.getDataRange().getValues().find(row => row[2] === data.email);
  if (existing) throw new Error('Email já cadastrado');

  sheet.appendRow([
    new Date(),
    data.nome,
    data.email,
    data.senha,
    data.telefone,
    data.endereco
  ]);

  return ContentService.createTextOutput(JSON.stringify({ success: true }))
    .setMimeType(ContentService.MimeType.JSON);
}

function loginCliente(data) {
  const sheet = SpreadsheetApp.getActiveSpreadsheet().getSheetByName('Clientes');
  const dados = sheet.getDataRange().getValues();

  for (let i = 1; i < dados.length; i++) {
    const row = dados[i];
    const [ , nome, email, senha, telefone, endereco ] = row;

    // Comparações seguras
    const emailPlanilha = String(email).trim().toLowerCase();
    const senhaPlanilha = String(senha).trim();
    const emailDigitado = String(data.email).trim().toLowerCase();
    const senhaDigitada = String(data.senha).trim();

    if (emailPlanilha === emailDigitado && senhaPlanilha === senhaDigitada) {
      return ContentService.createTextOutput(JSON.stringify({
        success: true,
        nome,
        telefone,
        endereco
      })).setMimeType(ContentService.MimeType.JSON);
    }
  }

  return ContentService.createTextOutput(JSON.stringify({
    success: false,
    error: 'Email ou senha inválidos'
  })).setMimeType(ContentService.MimeType.JSON);
}

function gerarListaComprasPorData() {
  const planilha = SpreadsheetApp.getActiveSpreadsheet();
  const abaPedidos = planilha.getSheetByName("Pedidos");
  const abaLista = planilha.getSheetByName("Lista de Compras");
  const abaAtual = planilha.getActiveSheet();

  const dataInput = abaAtual.getRange("B1").getValue();

  if (!dataInput) {
    SpreadsheetApp.getUi().alert("Por favor, preencha a data na célula B1.");
    return;
  }

  const dataFormatada = Utilities.formatDate(new Date(dataInput), Session.getScriptTimeZone(), "yyyy-MM-dd");

  const dadosPedidos = abaPedidos.getDataRange().getValues();
  const cabecalho = dadosPedidos[0];

  const colDataEntrega = cabecalho.indexOf("Data Entrega");
  const colProduto = cabecalho.indexOf("Produto");
  const colQuantidade = cabecalho.indexOf("Quantidade");
  const colUnidade = cabecalho.indexOf("Unidade");
  const colObservacoes = cabecalho.indexOf("Observações");

  if (colDataEntrega === -1 || colProduto === -1 || colQuantidade === -1 || colUnidade === -1) {
    SpreadsheetApp.getUi().alert("Verifique os nomes das colunas: 'Data Entrega', 'Produto', 'Quantidade' e 'Unidade'");
    return;
  }

  const mapaProdutos = {};

  for (let i = 1; i < dadosPedidos.length; i++) {
    const linha = dadosPedidos[i];
    const dataEntrega = linha[colDataEntrega];
    const dataLinha = Utilities.formatDate(new Date(dataEntrega), Session.getScriptTimeZone(), "yyyy-MM-dd");

    if (dataLinha === dataFormatada) {
      let produto = linha[colProduto].toString().trim();
      const observacoes = linha[colObservacoes] ? linha[colObservacoes].toString().trim() : '';

      if (observacoes) {
        produto += ` (${observacoes})`;
      }
      const unidade = linha[colUnidade].toString().trim();
      const qtd = parseFloat(linha[colQuantidade]) || 0;

      if (!mapaProdutos[produto]) {
        mapaProdutos[produto] = {};
      }

      if (!mapaProdutos[produto][unidade]) {
        mapaProdutos[produto][unidade] = 0;
      }

      mapaProdutos[produto][unidade] += qtd;
    }
  }

  // Preserva A1 e B1 e limpa o restante
  const ultimaLinha = abaLista.getLastRow();
  if (ultimaLinha > 1) {
    abaLista.getRange(2, 1, ultimaLinha - 1, abaLista.getMaxColumns()).clearContent();
  }

  // Escreve o título na linha 2
  abaLista.getRange("A2:B2").setValues([["Produto", "Quantidade Total"]]);

  const dadosSaida = [];

  for (const produto in mapaProdutos) {
    const unidades = mapaProdutos[produto];
    const partes = [];

    for (const unidade in unidades) {
      const qtd = unidades[unidade];
      partes.push(`${qtd} ${unidade}`);
    }

    dadosSaida.push([produto, partes.join(" + ")]);
    dadosSaida.sort((a, b) => a[0].localeCompare(b[0], 'pt-BR'));

  }

  if (dadosSaida.length > 0) {
    abaLista.getRange(3, 1, dadosSaida.length, 2).setValues(dadosSaida);
  } else {
    abaLista.getRange("A3").setValue("Nenhum pedido encontrado para a data informada.");
  }
}


